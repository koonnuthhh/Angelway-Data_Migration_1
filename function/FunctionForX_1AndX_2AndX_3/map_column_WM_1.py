from openpyxl import load_workbook
import os

def map_column_WM(source_file: str, destination_file: str) -> str:
    """
    Copies and transforms data from a source Excel file into a destination template (Template 1.2 or 2.2),
    fills in default values, and overwrites the destination file.

    Parameters:
        source_file (str): Path to the source Excel file.
        destination_file (str): Path to the destination Excel template (Template 1.2 or 2.2).

    Returns:
        str: Path to the overwritten destination file.
    """

    # Column mapping between source and both templates
    column_mapping = {
        '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤': '‡∏£‡∏´‡∏±‡∏™‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô VAT': '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£',
        '‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î': '‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î',
        '‡∏≠‡∏≤‡∏¢‡∏∏': '‡∏≠‡∏≤‡∏¢‡∏∏',
        '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û': '‡∏≠‡∏≤‡∏ä‡∏µ‡∏û/‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
        '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ(‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)': '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏à‡∏≥',
        '‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå': ['‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠', 'Phone'],  # use list for fallbacks
        '1. ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1': '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå 1',
        '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 1',
        '2. ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2': '‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå 2',
        '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2': '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á 2'
    }

    # Load source workbook
    source_wb = load_workbook(source_file, data_only=True)
    source_ws = source_wb.active
    source_headers = [cell.value for cell in source_ws[1]]
    source_col_indices = {col: idx + 1 for idx, col in enumerate(source_headers)}

    # Read source data
    source_data = {col: [] for col in source_headers}
    for row in source_ws.iter_rows(min_row=2, max_row=source_ws.max_row, values_only=True):
        for col_name, col_idx in source_col_indices.items():
            source_data[col_name].append(row[col_idx - 1])

    # Load destination workbook and find target sheet
    wb = load_workbook(destination_file)
    possible_sheets = ['Template1_WM', 'Template2_WM']
    ws = None
    for sheet in possible_sheets:
        if sheet in wb.sheetnames:
            ws = wb[sheet]
            break
    if ws is None:
        raise Exception("‚ùå Could not find a known template sheet in the destination file.")

    # Destination headers
    header = [cell.value for cell in ws[1]]

    # Copy data based on mapping
    for src_col, dest_col in column_mapping.items():
        if src_col not in source_data:
            print(f'‚ö†Ô∏è Source column "{src_col}" not found. Skipping.')
            continue

    # Handle fallback destination (if list of options)
        if isinstance(dest_col, list):
            chosen_dest_col = None
            for col_option in dest_col:
                if col_option in header:
                    chosen_dest_col = col_option
                    break
            if not chosen_dest_col:
                print(f'‚ö†Ô∏è None of destination columns {dest_col} found for "{src_col}". Skipping.')
                continue
        else:
            if dest_col not in header:
                print(f'‚ö†Ô∏è Destination column "{dest_col}" not found. Skipping.')
                continue
            chosen_dest_col = dest_col

        dest_col_index = header.index(chosen_dest_col) + 1
        for row_idx, value in enumerate(source_data[src_col], start=2):
            ws.cell(row=row_idx, column=dest_col_index, value=value)

        print(f'‚úÖ Copied "{src_col}" ‚Üí "{chosen_dest_col}"')

    # Fill default values
    default_fills = {
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏±‡∏ï‡∏£': '1',
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà': '1',
        '‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£': 'Y'
    }
    for col_name, default_value in default_fills.items():
        if col_name in header:
            col_index = header.index(col_name) + 1
            for row in ws.iter_rows(min_row=2):
                row[col_index - 1].value = default_value
            print(f'‚úÖ Filled column "{col_name}" with "{default_value}"')
        else:
            print(f'‚ö†Ô∏è Column "{col_name}" not found. Skipped filling default.')

    # Overwrite the destination file directly
    wb.save(destination_file)
    print(f'\nüéâ Done! File updated in place:\n{destination_file}')

    return destination_file